// 클라이언트 -> 서버 요청 -> 서버 응답 -> 클라이언트

클라이언트_화면_출력(); // 함수 호출 

function 클라이언트_화면_출력() { // 함수 정의
    let a = 10;
    let b = 20;
    let result = a + b; 
    // 스택 순서(위에서 부터) 1) a, b 변수 선언 2) 값 대입 3) a + b 4) result 변수 선언 5) result에 a + b 값 대입 


    let = 클라이언트_데이터_입력({num: 10, nmae: "심재원"}); // 매개변수 객체, 이때 아래 함수 () -> (num: number, name: string): string 혹은 아래 인터페이스 정의
    let = 클라이언트_데이터_입력("10");
    클라이언트_데이터_입력(20);
    // 각 함수가 메모리 할당, 둘 지역이 다름 ex)지역변수

    let 요청데이터 = { // 객체 생성
        데이터1: a,
        데이터2: b
    };
    // 데이터1을 쓰려면 요청데이터.데이터1

    클라이언트_데이터_삽입_요청_버튼_클릭(요청데이터); // 세 번째
    
    클라이언트_데이터_삽입_요청_버튼_클릭(function test() {}); // () 속 내용은 함수 정의, (test()) -> 함수 정의가 아닌 return 된 함수 값 

    /**
    function test() {
        return 요청데이터;
    }
    // 함수 속에 함수를 정의 하기 보다는 익명 함수를 사용
    */
    const test = () => {
        let c = 30;
        return 요청데이터;
    }

}

/** 
interface student {
    num: Number,
    name: string
}
*/

// Input
function 클라이언트_데이터_입력(데이터) { // 데이터: 매개변수
    //console.log(데이터);

    // 빈 값 리턴: return; 함수를 빠져나감 -> 거기서 실행 종료 -> 자료형 void
    return 데이터; 
}

function 클라이언트_데이터_삽입_요청_버튼_클릭(요청데이터) { // 두 번째
    백엔드_데이터_삽입_요청(요청데이터);
}

function 백엔드_데이터_삽입_요청(요청데이터) { // 첫 번째
    console.log(요청데이터);

    console.log("요청");
}

